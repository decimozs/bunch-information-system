<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AABJRU5ErkJggg==
</value>
  </data>
</root>